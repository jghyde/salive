diff --git a/js/photoswipe.jquery.js b/js/photoswipe.jquery.js
index 43fd4c4..3dc5ea0 100644
--- a/js/photoswipe.jquery.js
+++ b/js/photoswipe.jquery.js
@@ -2,20 +2,119 @@
  * Load PhotoSwipe once page is ready
  */
 (function ($) {
-Drupal.behaviors.photoswipe = {
-  attach: function (context, settings) {
-    var $galleries = $('.photoswipe-gallery', context);
-    if ($galleries.length) {
-      $galleries.each(function () {
-        $(this).find('a.photoswipe').photoSwipe(settings.photoswipe.options);
-      });
+
+  // triggers when user clicks on thumbnail
+  var onThumbnailsClick = function(e) {
+      e = e || window.event;
+      e.preventDefault ? e.preventDefault() : e.returnValue = false;
+
+      var $clickedGallery = $(this);
+
+      var eTarget = e.target || e.srcElement;
+      var $eTarget = $(eTarget);
+
+      // find root element of slide
+      var clickedListItem = $eTarget.closest('.photoswipe');
+
+      if(!clickedListItem) {
+          return;
+      }
+
+      // get the index of the clicked element
+      index = clickedListItem.parentsUntil($clickedGallery).index();
+
+      if(index >= 0) {
+          // open PhotoSwipe if valid index found
+          openPhotoSwipe( index, $clickedGallery );
+      }
+      return false;
+  };
+
+  // parse picture index and gallery index from URL (#&pid=1&gid=2)
+  var photoswipeParseHash = function() {
+      var hash = window.location.hash.substring(1),
+      params = {};
+
+      if(hash.length < 5) {
+          return params;
+      }
+
+      var vars = hash.split('&');
+      for (var i = 0; i < vars.length; i++) {
+          if(!vars[i]) {
+              continue;
+          }
+          var pair = vars[i].split('=');
+          if(pair.length < 2) {
+              continue;
+          }
+          params[pair[0]] = pair[1];
+      }
+
+      if(params.gid) {
+          params.gid = parseInt(params.gid, 10);
+      }
+
+      if(!params.hasOwnProperty('pid')) {
+          return params;
+      }
+      params.pid = parseInt(params.pid, 10);
+      return params;
+  };
+
+  var openPhotoSwipe = function(index, galleryElement, disableAnimation) {
+      var pswpElement = $('.pswp')[0];
+      var items = [];
+
+      var images = galleryElement.find('a.photoswipe');
+      images.each(function (index) {
+        var $image = $(this);
+        size = $image.data('size').split('x');
+        items.push(
+          {
+            src : $image.attr('href'),
+            w: size[0],
+            h: size[1],
+            title : $image.data('overlay-title')
+          }
+        );
+      })
+
+      // define options (if needed)
+      options = {
+          index: index,
+          // define gallery index (for URL)
+          galleryUID: galleryElement.data('pswp-uid'),
+      };
+
+      if(disableAnimation) {
+          options.showAnimationDuration = 0;
+      }
+
+      // Pass data to PhotoSwipe and initialize it
+      gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
+      gallery.init();
+  };
+
+
+  Drupal.behaviors.photoswipe = {
+    attach: function (context, settings) {
+
+      var $galleries = $('.photoswipe-gallery', context);
+      if ($galleries.length) {
+        // loop through all gallery elements and bind events
+        $galleries.each( function (index) {
+           var $gallery = $(this);
+           $gallery.attr('data-pswp-uid', index+1);
+           $gallery.click(onThumbnailsClick);
+        });
+
+        // Parse URL and open gallery if it contains #&pid=3&gid=1
+        var hashData = photoswipeParseHash();
+        if(hashData.pid > 0 && hashData.gid > 0) {
+            openPhotoSwipe( hashData.pid - 1 ,  $($galleries[ hashData.gid - 1 ]), true );
+        }
+      }
     }
-    else if ($('a.photoswipe', context).length) {
-      // We have no galleries just individual images.
-      $('a.photoswipe', context).each(function() {
-        $(this).photoSwipe(settings.photoswipe.options);
-      });
-    }
-  }
-};
+  };
 })(jQuery);
diff --git a/photoswipe.install b/photoswipe.install
index bf62010..00fe78f 100644
--- a/photoswipe.install
+++ b/photoswipe.install
@@ -31,24 +31,37 @@ function photoswipe_uninstall() {
  * Implements hook_requirements().
  */
 function photoswipe_requirements($phase) {
-  $requirements = array();
-  // Ensure translations don't break at install time.
-  $t = get_t();
 
+  $requirements = array();
 
   if ($phase == 'runtime') {
-    $path = libraries_get_path('photoswipe');
-    $version = photoswipe_get_version($path);
-    $requirements['photoswipe'] = array(
-      'title' => $t('PhotoSwipe'),
-      'value' => $version,
-      'severity' => REQUIREMENT_OK,
-    );
-
-    if (!$path || !file_exists($path . '/code.photoswipe.jquery-' . $version . '.min.js')) {
-      $requirements['photoswipe']['value'] = $t('Third party PhotoSwipe software not properly installed');
-      $requirements['photoswipe']['description'] = $t('PhotoSwipe was not found in the \'libraries\' folder (e.g. sites/all/libraries).');
-      $requirements['photoswipe']['severity'] = REQUIREMENT_ERROR;
+    $t = get_t();
+    $library = libraries_detect('photoswipe');
+    $error_type = isset($library['error']) ? drupal_ucfirst($library['error']) : '';
+    $error_message = isset($library['error message']) ? $library['error message'] : '';
+
+    if (empty($library['installed'])) {
+      $requirements['photoswipe_plugin'] = array(
+        'title' => $t('Photoswipe plugin'),
+        'value' => $t('@e: At least @a', array('@e' => $error_type, '@a' => PHOTOSWIPE_MIN_PLUGIN_VERSION)),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('!error You need to download the !photoswipe, extract the archive and place the colorbox directory in the %path directory on your server.', array('!error' => $error_message, '!photoswipe' => l($t('Photoswipe plugin'), $library['download url']), '%path' => 'sites/all/libraries')),
+      );
+    }
+    elseif (version_compare($library['version'], PHOTOSWIPE_MIN_PLUGIN_VERSION, '>=')) {
+      $requirements['photoswipe_plugin'] = array(
+        'title' => $t('Photoswipe plugin'),
+        'severity' => REQUIREMENT_OK,
+        'value' => $library['version'],
+      );
+    }
+    else {
+      $requirements['photoswipe_plugin'] = array(
+        'title' => $t('Photoswipe plugin'),
+        'value' => $t('At least @a', array('@a' => PHOTOSWIPE_MIN_PLUGIN_VERSION)),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('You need to download a later version of the !photoswipe and replace the old version located in the %path directory on your server.', array('!photoswipe' => l($t('Photoswipe plugin'), $library['download url']), '%path' => $library['library path'])),
+      );
     }
   }
 
diff --git a/photoswipe.module b/photoswipe.module
index 7c93773..ee7ff78 100644
--- a/photoswipe.module
+++ b/photoswipe.module
@@ -6,6 +6,12 @@
  */
 
 /**
+ * The default path to the Colorbox directory.
+ */
+define('PHOTOSWIPE_MIN_PLUGIN_VERSION', '4.0.0');
+
+
+/**
  * Implements hook_theme().
  */
 function photoswipe_theme() {
@@ -14,6 +20,7 @@ function photoswipe_theme() {
       'variables' => array(
         'image' => array(),
         'path' => NULL,
+        'dimension' => NULL,
         'title' => NULL,
         'gid' => NULL,
       ),
@@ -46,24 +53,120 @@ function photoswipe_help($path, $arg) {
  * Implements hook_init().
  */
 function photoswipe_init() {
-  $path = libraries_get_path('photoswipe');
-  $version = photoswipe_get_version($path);
-
-  drupal_add_js($path . '/lib/klass.min.js');
+  libraries_load('photoswipe');
 
-  drupal_add_js($path . '/code.photoswipe.jquery-' . $version . '.js');
   drupal_add_js(drupal_get_path('module', 'photoswipe') . '/js/photoswipe.jquery.js');
 
-  drupal_add_css($path . '/photoswipe.css');
-  $settings = variable_get('photoswipe_settings', photoswipe_get_default_settings());
-  drupal_add_js(array(
-    'photoswipe' => array(
-      'options' => $settings,
+  // $settings = variable_get('photoswipe_settings', photoswipe_get_default_settings());
+  // drupal_add_js(array(
+  //   'photoswipe' => array(
+  //     'options' => $settings,
+  //   ),
+  // ), array('type' => 'setting', 'scope' => JS_DEFAULT));
+}
+
+
+/**
+ * Implements hook_libraries_info().
+ */
+function photoswipe_libraries_info() {
+  $libraries['photoswipe'] = array(
+    'name' => 'Photoswipe plugin',
+    'vendor url' => 'http://photoswipe.com',
+    'download url' => 'https://github.com/dimsemenov/PhotoSwipe/archive/v4.0.1.zip',
+    'version arguments' => array(
+      'file' => 'photoswipe.min.js',
+      'pattern' => '@(?i:PhotoSwipe)\s-\sv?([0-9\.a-z]+)@',
+      'lines' => 5,
     ),
-  ), array('type' => 'setting', 'scope' => JS_DEFAULT));
+    'files' => array(
+      'js' => array(
+        'photoswipe.min.js',
+        'photoswipe-ui-default.min.js'
+      ),
+      'css' => array(
+        'photoswipe.css',
+        'default-skin/default-skin.css'
+      )
+    ),
+    'variants' => array(
+      'minified' => array(
+        'files' => array(
+          'js' => array(
+            'photoswipe.min.js',
+            'photoswipe-ui-default.min.js'
+          ),
+          'css' => array(
+            'photoswipe.css'
+          )
+        ),
+      ),
+      'source' => array(
+        'files' => array(
+          'js' => array(
+            'photoswipe.js',
+            'photoswipe-ui-default.js'
+          ),
+          'css' => array(
+            'photoswipe.css',
+            'default-skin/default-skin.css'
+          )
+        ),
+      ),
+    ),
+  );
+
+  return $libraries;
 }
 
 /**
+ * Implements hook_page_build().
+ */
+function photoswipe_page_build(&$page) {
+  // Add our CSS file that adds common needed classes, such as align-left,
+  // align-right, underline, indent, etc.
+  $page['page_bottom']['photoswipe']['#markup'] = '
+    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
+        <div class="pswp__bg"></div>
+        <div class="pswp__scroll-wrap">
+            <div class="pswp__container">
+                <div class="pswp__item"></div>
+                <div class="pswp__item"></div>
+                <div class="pswp__item"></div>
+            </div>
+            <div class="pswp__ui pswp__ui--hidden">
+                <div class="pswp__top-bar">
+                    <div class="pswp__counter"></div>
+                    <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
+                    <button class="pswp__button pswp__button--share" title="Share"></button>
+                    <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
+                    <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
+                    <div class="pswp__preloader">
+                        <div class="pswp__preloader__icn">
+                          <div class="pswp__preloader__cut">
+                            <div class="pswp__preloader__donut"></div>
+                          </div>
+                        </div>
+                    </div>
+                </div>
+                <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
+                    <div class="pswp__share-tooltip"></div>
+                </div>
+                <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
+                </button>
+                <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
+                </button>
+                <div class="pswp__caption">
+                    <div class="pswp__caption__center"></div>
+                </div>
+              </div>
+            </div>
+    </div>
+  ';
+}
+
+
+/**
  * Implements hook_menu().
  */
 function photoswipe_menu() {
diff --git a/photoswipe.theme.inc b/photoswipe.theme.inc
index bd10ce4..9a3d697 100644
--- a/photoswipe.theme.inc
+++ b/photoswipe.theme.inc
@@ -37,19 +37,25 @@ function theme_photoswipe_image_formatter($variables) {
     'style_name' => $settings['photoswipe_node_style'],
   );
 
+  $dimensions = array();
   if (isset($item['width']) && isset($item['height'])) {
-    $image['width'] = $item['width'];
-    $image['height'] = $item['height'];
+    $image['width'] = $dimensions['width'] = $item['width'];
+    $image['height'] = $dimensions['height'] = $item['height'];
   }
 
   if ($style_name = $settings['photoswipe_image_style']) {
     $path = image_style_url($style_name, $image['path']);
+    $dimensions = array(
+      'width' => $item['width'],
+      'height' => $item['height'],
+    );
+    image_style_transform_dimensions($style_name, $dimensions);
   }
   else {
     $path = file_create_url($image['path']);
   }
 
-  return theme('photoswipe_imagefield', array('image' => $image, 'path' => $path));
+  return theme('photoswipe_imagefield', array('image' => $image, 'path' => $path, 'dimensions' => $dimensions['width'] . 'x' . $dimensions['height']));
 }
 
 
@@ -65,7 +71,6 @@ function theme_photoswipe_image_formatter($variables) {
  */
 function theme_photoswipe_imagefield($variables) {
   $class = array('photoswipe');
-
   if (!empty($variables['image']['style_name'])) {
     $image = theme('image_style', $variables['image']);
   }
@@ -77,6 +82,8 @@ function theme_photoswipe_imagefield($variables) {
     'html' => TRUE,
     'attributes' => array(
       'class' => implode(' ', $class),
+      'data-size' => $variables['dimensions'],
+      'data-overlay-title' => $variables['image']['alt']
     )
   );
 
