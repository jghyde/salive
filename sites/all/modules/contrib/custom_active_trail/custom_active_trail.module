<?php

/**
 * Implements hook_form_alter().
 */
function custom_active_trail_form_node_form_alter(&$form, &$form_state, $form_id) {

   $type = $form['#node']->type;
   $options = menu_parent_options(menu_get_menus(), $type, $type);

   // If no possible parent menu items were found, there is nothing to display.
   if (empty($options)) {
     return;
   }

   array_unshift($options, '-- NONE --');

   $form['custom_active_trail'] = array(
     '#type' => 'fieldset',
     '#title' => t('Custom active trail settings'),
     '#access' => user_access('administer menu'),
     '#collapsible' => TRUE,
     '#collapsed' => TRUE,
     '#group' => 'additional_settings',
     '#tree' => TRUE,
     '#weight' => -1,
   );

   if(isset($form['#node']->nid)) {
     $default = custom_active_trail_get_default_menu_item($form['#node']->nid);
   } else {
     $default = NULL;
   }

   $form['custom_active_trail']['menu_item'] = array(
     '#type' => 'select',
     '#title' => t('Active menu trail item'),
     '#description' => t('Select the menu item which will be set as active when this node is displayed'),
     '#default_value' => $default,
     '#options' => $options,
     '#attributes' => array('class' => array('menu-parent-select')),
   );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_active_trail_form_node_type_form_alter(&$form, &$form_state) {

  $type = $form['#node_type'];
  $form['custom_active_trail_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Active Trail Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#access' => user_access('administer menu'),
  );

  $options = menu_parent_options(menu_get_menus(), array('mlid' => 0));
  array_unshift($options, '-- NONE --');

  $form['custom_active_trail_settings']['custom_active_trail_default'] = array(
    '#type' => 'select',
    '#title' => t('Active menu trail item'),
    '#default_value' => custom_active_trail_get_default_menu_item(0, $form['#node_type']->type),
    '#options' => $options,
    '#description' => t('Select the menu item which will be used as the default active item when nodes of this content type is displayed. Per-node custom active trail and individual menu link settings override this default.'),
    '#attributes' => array('class' => array('menu-title-select')),
  );

  $form['#submit'][] = 'custom_active_trail_node_type_form_submit';

}

function custom_active_trail_node_type_form_submit($form, &$form_state) {

  db_delete('custom_active_trail')->condition('type', $form_state['values']['type'])->execute();

  if (!empty($form_state['values']['custom_active_trail_default'])) {

    $item = explode(':', $form_state['values']['custom_active_trail_default']);

    db_insert('custom_active_trail')
      ->fields(array(
        'nid' => 0,
        'type' => $form_state['values']['type'],
        'menu_name' => $item[0],
        'mlid' => $item[1],
      ))->execute();
  }

}

/**
 * Implements hook_init().
 */
function custom_active_trail_init() {
  $node = menu_get_object();

  if($node) {
    $query = db_select('custom_active_trail', 'c');
    $query->join('menu_links', 'm', 'c.mlid = m.mlid');
    $query->fields('c')
      ->fields('m')
      ->condition('nid', $node->nid);

    $result = $query->execute()->fetchAssoc();

    if(isset($result['link_path'])) {
      // Set the path using menu_tree_set_path()
      menu_tree_set_path($result['menu_name'], $result['link_path']);

    } else {

      // Does this exist in the menu trail already?
      // If so, we should use that instead of the content type default
      $mlink = db_select('menu_links', 'm')
        ->fields('m', array('mlid'))
        ->condition('link_path', 'node/' . $node->nid)
        ->execute()
        ->fetchField();

      if(!$mlink > 0) {

        $query = db_select('custom_active_trail', 'c');
        $query->join('menu_links', 'm', 'c.mlid = m.mlid');
        $query->fields('c')
          ->fields('m')
          ->condition('nid', 0)
          ->condition('type', $node->type);

        $result = $query->execute()->fetchAssoc();
        if(isset($result['link_path'])) {
          // Set the path using menu_tree_set_path()
          menu_tree_set_path($result['menu_name'], $result['link_path']);

        }
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function custom_active_trail_node_submit($node, $form, &$form_state) {

  db_delete('custom_active_trail')->condition('nid', $node->nid)->execute();

  if (!empty($form_state['values']['custom_active_trail']['menu_item'])) {

    list($node->custom_active_trail['menu_name'], $node->custom_active_trail['mlid']) = explode(':', $form_state['values']['custom_active_trail']['menu_item']);

  }
}

/**
 * Implements hook_node_insert().
 */
function custom_active_trail_node_insert($node) {
  custom_active_trail_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function custom_active_trail_node_update($node) {
  custom_active_trail_node_save($node);
}

/**
 * Implements hook_node_save().
 */
function custom_active_trail_node_save($node) {
  if(isset($node->custom_active_trail['menu_name']) && isset($node->custom_active_trail['mlid'])) {
    db_insert('custom_active_trail')
      ->fields(array(
        'nid' => $node->nid,
        'menu_name' => $node->custom_active_trail['menu_name'],
        'mlid' => $node->custom_active_trail['mlid'],
      ))->execute();
  }
}

function custom_active_trail_get_default_menu_item($nid, $type = FALSE) {
  $menu_item = db_select('custom_active_trail', 'cat');
  $menu_item->fields('cat', array('menu_name', 'mlid'))
    ->condition('nid', $nid);

  if($type) {
    $menu_item->condition('type', $type);
  }

  $menu_item = $menu_item->execute()->fetchAssoc();

  if(count($menu_item) > 0) {
    return($menu_item['menu_name'] . ':' . $menu_item['mlid']);
  }
  return FALSE;

}